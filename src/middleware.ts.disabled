import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

// Map of old numeric IDs to new slugs
const idToSlugMap: Record<number, string> = {
  1: 'future-library-technology-australian-libraries'
};

// Disable middleware for static export
export function middleware(request: NextRequest) {
  // Skip middleware for static export
  if (process.env.NODE_ENV === 'production' && process.env.NEXT_EXPORT) {
    return NextResponse.next();
  }
  const { pathname } = request.nextUrl;

  // Check if the path matches the old insights/[id] pattern
  const insightsIdMatch = pathname.match(/^\/insights\/(\d+)\/?$/);
  
  if (insightsIdMatch) {
    const oldId = parseInt(insightsIdMatch[1]);
    const newSlug = idToSlugMap[oldId];
    
    if (newSlug) {
      // Redirect to the new slug-based URL
      const newUrl = new URL(`/insights/${newSlug}`, request.url);
      return NextResponse.redirect(newUrl, 301); // Permanent redirect
    }
  }

  // Create response and add security headers
  const response = NextResponse.next();

  // Security Headers for Australian Library Website
  // Essential for government/public sector compliance

  // Prevent clickjacking attacks
  response.headers.set('X-Frame-Options', 'DENY');

  // Prevent MIME type sniffing
  response.headers.set('X-Content-Type-Options', 'nosniff');

  // Control referrer information sent with requests
  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');

  // Control browser features and APIs
  response.headers.set(
    'Permissions-Policy',
    'camera=(), microphone=(), geolocation=(), interest-cohort=()'
  );

  // Content Security Policy - Prevents XSS attacks
  // Configured for Next.js and common library website needs
  response.headers.set(
    'Content-Security-Policy',
    [
      "default-src 'self'",
      "script-src 'self' 'unsafe-eval' 'unsafe-inline' https://www.googletagmanager.com https://www.google-analytics.com",
      "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com",
      "img-src 'self' data: https: blob:",
      "font-src 'self' https://fonts.gstatic.com",
      "connect-src 'self' https://www.google-analytics.com https://analytics.google.com",
      "frame-src 'none'",
      "object-src 'none'",
      "base-uri 'self'",
      "form-action 'self'",
      "frame-ancestors 'none'"
    ].join('; ')
  );

  // Force HTTPS in production (HSTS)
  if (process.env.NODE_ENV === 'production') {
    response.headers.set(
      'Strict-Transport-Security',
      'max-age=31536000; includeSubDomains; preload'
    );
  }

  // Additional security headers for Australian government compliance
  response.headers.set('X-XSS-Protection', '1; mode=block');
  response.headers.set('X-DNS-Prefetch-Control', 'off');
  response.headers.set('X-Download-Options', 'noopen');
  response.headers.set('X-Permitted-Cross-Domain-Policies', 'none');

  return response;
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
}
